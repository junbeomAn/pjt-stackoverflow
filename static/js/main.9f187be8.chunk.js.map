{"version":3,"sources":["serviceWorker.js","components/SideNav.js","components/LogoutButton.js","auth/index.js","components/TopNav.js","components/LoginButton.js","components/CreatePostButton.js","components/List.js","components/Showcase.js","routes/Home.js","routes/Login.js","mutations/DeletePost.js","mutations/TerminatePost.js","queries/GetPostsWithPage.js","queries/GetPostState.js","queries/GetPost.js","components/PostOption.js","components/SaveButton.js","mutations/UpdatePost.js","components/Post.js","components/Pagination.js","queries/GetCommentsByPostId.js","mutations/LikeComment.js","mutations/DislikeComment.js","mutations/SelectComment.js","mutations/DeleteComment.js","components/AnswerOption.js","mutations/UpdateComment.js","components/Answer.js","components/Answers.js","ABI/index.js","queries/GetPostWithKeyword.js","routes/PostList.js","components/StepChanger.js","components/Steps.js","routes/CreatePost.js","routes/NoMatch.js","components/Footer.js","index.js","routes/index.js"],"names":["Boolean","window","location","hostname","match","SideNav","_ref","children","react_default","a","createElement","className","LogoutButton","onClick","axios","get","withCredentials","then","redirectURL","data","console","log","_this","props","history","push","catch","err","Fragment","this","Component","isAuthenticated","Cookies","getUserId","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","_ref3","userId","wrap","_context","prev","next","abrupt","sent","t0","stop","apply","arguments","TopNav","react_router_dom","to","components_LogoutButton","href","React","List","onMakeClickLink","page","id","keyword","concat","_this2","_this$props","loading","posts","client","onPostClick","postId","react","Loader","size","active","inverted","length","map","p","_id","key","title","reward","moment","Date","createdAt","fromNow","Showcase","Icon","name","Home","state","contents","_ref2$data$getPost","query","getPostQuery","variables","getPost","setState","onKeywordSearch","e","alert","onValueChange","target","value","_this$props$data","_this$props$data$getP","getPostsWithPage","params","slice","reverse","react_apollo_esm","index_esm","split","minSize","defaultSize","components_SideNav","components_Showcase","components_TopNav","Input","onKeyPress","onChange","placeholder","gql","_templateObject","_templateObject2","getPostsWithPageQuery","_templateObject3","compose","graphql","Login","email","password","onSubmit","_this$state","res","_res$data$login","ok","mutate","login","user","localStorage","setItem","_e$target","defineProperty","Container","text","Header","as","Form","Field","fluid","type","Button","loginMutation","Login_templateObject","DeletePost_templateObject","TerminatePost_templateObject","GetPostsWithPage_templateObject","GetPostState_templateObject","GetPost_templateObject","PostOption","refetchPostState","getPostStateQuery","refetchPosts","parseInt","onDeletePost","deletePost","terminatePostAndDealBreak","_callee2","terminatePost","_context2","isTerminatable","onDealBreak","error","_callee3","_ref4","comments","terminatable","_context3","fetchPolicy","reduce","acc","v","likes","_callee4","myContract","options","_context4","gas","methods","dealBreak","send","_this$props2","terminated","onChangeEditStatus","tags","isMine","mutation","terminatePostMutation","refetchQueries","deletePostMutation","i","SaveButton","onChangeStatus","UpdatePost_templateObject","Post","editStatus","onUpdatePost","updatePost","currPost","onChangeEditStatusTrue","onChangeEditStatusFalse","setContentsState","prevProps","prevState","idChange","postChange","updatePostMutation","TextArea","autoFocus","components_SaveButton","components_PostOption","getPostState","react_markdown_default","source","Pagination","prevPage","nextPage","GetCommentsByPostId_templateObject","LikeComment_templateObject","DislikeComment_templateObject","SelectComment_templateObject","DeleteComment_templateObject","AnswerOption","authenticated","voted","refetchComments","getCommentsByPostIdQuery","refetchCommentsAndPostState","onDealSuccess","userMetamaskAccount","comment","metaAccount","setRecipientAndDealConclusion","onSelectComment","selectComment","commentId","onEstimateComment","handleComment","_this$props3","_this$props3$comment","selected","likeCommentMutation","likeComment","dislikeCommentMutation","dislikeComment","selectCommentMutation","color","deleteCommentMutation","deleteComment","UpdateComment_templateObject","Answer","onUpdateComment","updateComment","updateCommentMutation","components_AnswerOption","Answers","writeStatus","getCurrentPost","filter","onAddClick","onChangeWriteStatusFalse","account","_this3","getCommentsByPostId","components_Answer","createCommentMutation","Answers_templateObject","ABI","constant","inputs","outputs","payable","stateMutability","GetPostWithKeyword_templateObject","PostList","searchKeyword","onTransactionDefaultSetting","web3","Web3","currentProvider","eth","getAccounts","Contract","defaultAccount","defaultGasPrice","onMakePostQuery","getPostWithKeywordQuery","onMakePostQueryVariables","_this$props$match$par","handleParsePageNum","undefined","_this$props$match$par2","loadingOne","_ref2$data","_ref2$data$getPostsWi","_ref2$data$getPostWit","getPostWithKeyword","react_router","loadingTwo","components_List","components_Pagination","components_Post","Modal","trigger","basic","Content","autofocus","components_Answers","PostList_templateObject","StepChanger","prevStep","nextStep","changeStep","Steps","currentPrice","setInterval","closing_price","currentStep","Step","Group","vertical","Title","Description","CreatePost","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","contract","balance","weiBalance","etherBalance","getBalance","utils","fromWei","onSetQuestion","rewardWei","toWei","setQuestion","_x","_this$state2","_res$data$createPost","preventDefault","parseFloat","GetPostsWithPageQuery","createPost","post","_x2","onAddTag","includes","toConsumableArray","tagValue","onDeleteTag","stopPropagation","previousSibling","textContent","onChangeStep","steps","_this$state3","components_Steps","components_StepChanger","Fade_default","right","style","minHeight","createPostMutation","CreatePost_templateObject","NoMatch","Footer","ApolloClient","uri","App","path","exact","component","components_Footer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f187be8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst SideNav = ({children}) => {\r\n  \r\n  return (\r\n    <div className=\"side__nav\">\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\nexport default SideNav;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass LogoutButton extends Component {\r\n  onClick = () => {\r\n    axios\r\n      .get(\"http://localhost:4000/logout\", { withCredentials: true })\r\n      .then(({ data: { redirectURL} }) => { \r\n        console.log(redirectURL);\r\n        this.props.history.push(redirectURL);\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"header__nav--logout\" onClick={this.onClick}>logout</li>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogoutButton;\r\n","import Cookies from \"js-cookie\";\r\nimport React from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const isAuthenticated = () => {\r\n  // console.log(Cookies.get(\"connect.sid\"));\r\n  return !!Cookies.get(\"connect.sid\");\r\n};\r\n\r\nexport const redirectToHome = history => {\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const AuthenticatedComponent = ({\r\n  component: Component,\r\n  alt: Alternative,\r\n  props\r\n}) =>\r\n  isAuthenticated() ? <Component {...props} /> : <Alternative {...props} />;\r\n\r\n\r\nexport const getUserId = async () => {\r\n  if (!isAuthenticated()) {\r\n    return '';\r\n  }\r\n  try {\r\n    const { data: userId } = await axios.get(\r\n      \"http://localhost:4000/getUserId\",\r\n      { withCredentials: true }\r\n    );\r\n    return userId;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }  \r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LogoutButton from './LogoutButton';\r\nimport { isAuthenticated } from './../auth';\r\n\r\nconst TopNav = ({history, match}) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <ul className=\"header__nav\">\r\n        <Link to=\"/\">\r\n          <li>Home</li>\r\n        </Link>\r\n        <Link to=\"/post/page/1\">\r\n          <li>Post</li>\r\n        </Link>\r\n        <Link to=\"/\">\r\n          <li>About</li>\r\n        </Link>\r\n        <Link to=\"/\">\r\n          <li>Rank</li>\r\n        </Link>        \r\n        {\r\n          isAuthenticated() ? \r\n          <LogoutButton history={history} /> : \r\n          (\r\n            // match.url === '/' ? \r\n            // <li className=\"filled-transparent-space\">Login</li> :\r\n            <a href=\"http://127.0.0.1:4000/glogin\" ><li>Login</li></a>\r\n          )\r\n        }        \r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopNav;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// import { ApolloConsumer } from \"react-apollo\";\r\n// import gql from \"graphql-tag\";\r\n\r\nclass LoginButton extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <a href=\"http://127.0.0.1:4000/glogin\">\r\n          <Button primary>Login or Create</Button>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default LoginButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\nclass CreatePostButton extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link to=\"/post/create\">\r\n          <Button primary>Create Post</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default CreatePostButton;\r\n","import React, { Component, Fragment } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Loader } from 'semantic-ui-react';\r\nimport moment from \"moment\";\r\nimport \"moment/locale/ko\";\r\n\r\nclass List extends Component {  \r\n\r\n  onMakeClickLink = (page, id) => {\r\n    const { keyword } =this.props;\r\n    if (!keyword) {\r\n      return `/post/page/${page || 1}/${id}`;\r\n    } else {\r\n      return `/post/${keyword}/page/${page || 1}/${id}`\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loading, posts, client, onPostClick, page, postId } = this.props;\r\n    \r\n    return (\r\n      <Fragment>\r\n        {loading ? (\r\n          <Loader size=\"large\" active inverted>Loading . . .</Loader>\r\n        ) : posts.length ? (\r\n          posts.map(p => (\r\n            <Link\r\n              to={this.onMakeClickLink(page, p._id)}\r\n              key={p._id}\r\n              // onClick={() => onPostClick(client, p._id)}\r\n            >\r\n              <div className={postId === p._id ? \"side__nav--item active\" : \"side__nav--item\"}>\r\n                <div className=\"item-title\">{p.title}</div>\r\n                <div className=\"item-info\">\r\n                  <div>\r\n                    { `${p.reward} 이더`}\r\n                  </div>\r\n                  <div>|</div>\r\n                  <div>\r\n                    {moment(new Date(+p.createdAt)).fromNow()}  \r\n                  </div>                  \r\n                </div>\r\n              </div>\r\n            </Link>\r\n          ))\r\n        ) : <h1>Oops! No results!</h1>}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List;","import React, {Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { isAuthenticated } from '../auth';\r\n\r\nclass Showcase extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home__showcase\">\r\n        <h1>언제까지 . . . <br/>고민만 할 건가요?</h1>             \r\n          <Link to=\"/post/create\" className=\"home__showcase--question-btn\">\r\n            질문하기 &gt;\r\n          </Link>\r\n          {\r\n            isAuthenticated() ? \r\n            <Link to=\"/post/page/1\" className=\"home__showcase--login-btn\">\r\n              질문보러가기 &gt;\r\n            </Link> : \r\n            <a href=\"http://127.0.0.1:4000/glogin\" className=\"home__showcase--login-btn\">\r\n              <Icon name=\"github\"/>깃허브 로그인      \r\n            </a>\r\n          }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Showcase;","import React, { Component } from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport { compose, graphql, ApolloConsumer } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { Input, Icon } from \"semantic-ui-react\";\r\n\r\nimport SideNav from \"./../components/SideNav\";\r\nimport TopNav from \"../components/TopNav\";\r\nimport LoginButton from \"./../components/LoginButton\";\r\nimport CreatePostButton from './../components/CreatePostButton';\r\nimport { AuthenticatedComponent } from '../auth';\r\nimport List from './../components/List';\r\nimport Showcase from './../components/Showcase'\r\n\r\nconst config = {\r\n  alt: LoginButton,\r\n  component: CreatePostButton,\r\n}\r\n\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n    title: '',\r\n    contents: '',\r\n    createdAt: '',\r\n    keyword: '',\r\n  }\r\n\r\n  onPostClick = async (client, _id) => {\r\n    const {\r\n      data: {\r\n        getPost: { title, contents, createdAt }\r\n      }\r\n    } = await client.query({\r\n      query: getPostQuery,\r\n      variables: { _id }\r\n    });\r\n    this.setState({ title, contents, createdAt });\r\n  };\r\n\r\n  onKeywordSearch = (e) => {\r\n    const { keyword } = this.state;\r\n    if (e.key !== \"Enter\") {\r\n      return ;\r\n    }\r\n    if (!keyword) {\r\n      alert(\"검색어를 입력하세요\");\r\n      return;\r\n    }\r\n    this.props.history.push(`/post/${this.state.keyword}/page/1`);\r\n  }\r\n\r\n  onValueChange = (e) => {\r\n    const keyword = e.target.value;\r\n    this.setState({ keyword });\r\n  }\r\n \r\n  render() {\r\n    const { props } = this;\r\n    let {\r\n      data: { getPostsWithPage: posts = [], loading },\r\n      match: { params: { page }},\r\n    } = this.props;\r\n    posts = posts.slice().reverse();\r\n    return (\r\n      <ApolloConsumer>\r\n        {client => (\r\n          <div className=\"home\">\r\n            <SplitPane split=\"vertical\" minSize=\"50%\" defaultSize=\"50%\">\r\n              <SideNav>\r\n                <Showcase />\r\n                 {/*<List \r\n                  loading={loading}\r\n                  posts={posts}\r\n                  client={client}\r\n                  // onPostClick={this.onPostClick}\r\n                  page={page}\r\n                 />*/}\r\n              </SideNav>\r\n              <main className=\"main__screen--home\">\r\n                <TopNav {...props} />\r\n                {/*\r\n                  <div className=\"main__screen--home--button\">\r\n                  {AuthenticatedComponent(Object.assign({ props }, config))}\r\n                  </div>\r\n                */}\r\n                <div className=\"home-search-container\">\r\n                  <Input className=\"home-search\" onKeyPress={this.onKeywordSearch} onChange={this.onValueChange} value={this.state.keyword} size=\"big\" placeholder='검색어를 입력하세요' />\r\n                </div>                \r\n              </main>\r\n            </SplitPane>\r\n          </div>\r\n        )}        \r\n      </ApolloConsumer>\r\n    )\r\n  }\r\n}\r\n\r\nconst allPostsQuery = gql`\r\n  {\r\n    allPosts {\r\n      _id\r\n      userId\r\n      title\r\n      contents\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst getPostQuery = gql`\r\n  query($_id: String!) {\r\n    getPost(_id: $_id) {\r\n      title\r\n      contents\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\nconst getPostsWithPageQuery = gql`\r\n  {\r\n    getPostsWithPage(page: 1) {\r\n  \t\t_id\r\n    \tuserId\r\n      title\r\n      contents\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default compose(graphql(getPostsWithPageQuery))(Home);\r\n","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { compose, graphql } from 'react-apollo';\r\nimport { Form, Input, Header, Container, Button } from 'semantic-ui-react';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  }\r\n\r\n  onSubmit = async () => { // this should be work for github login later.\r\n    const { email, password } = this.state;\r\n    const res = await this.props.mutate({\r\n      variables: { email, password }\r\n    });\r\n    \r\n    console.log(res);\r\n    const { ok, user: { _id } } = res.data.login;\r\n\r\n    localStorage.setItem('userId', _id);\r\n\r\n    if (ok) {\r\n      this.props.history.push('/');\r\n    }\r\n    else {\r\n      console.log('invalid login');\r\n    }    \r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { password, email } = this.props;\r\n    console.log(this.props);\r\n    return (\r\n      <Container text>\r\n      <Header as=\"h2\">Login page</Header>\r\n      <Form>\r\n        <Form.Field >\r\n          <Input onChange={this.onChange} value={email} placeholder=\"Email\" fluid name=\"email\"/>\r\n        </Form.Field>\r\n        <Form.Field >\r\n          <Input onChange={this.onChange} value={password} type=\"password\" placeholder=\"Password\" fluid name=\"password\"/>\r\n        </Form.Field>\r\n        <Button onClick={this.onSubmit} >Submit</Button>\r\n      </Form>     \r\n      \r\n    </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst loginMutation = gql`\r\n  mutation($email:String!, $password: String!){\r\n  login(email: $email, password: $password) {\r\n    ok\r\n    user {\r\n      _id\r\n      email\r\n      username\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport default graphql(loginMutation)(Login);","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($postId: String!) {\r\n  deletePost(postId: $postId) {\r\n    ok\r\n  }\r\n}\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($postId: String!) {\r\n    terminatePost(postId: $postId) {\r\n      ok\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport default gql`\r\n  query($page: Int!) {\r\n    getPostsWithPage(page: $page) {\r\n      _id\r\n      userId\r\n      title\r\n      contents\r\n      createdAt\r\n      reward\r\n      comments {\r\n        likes\r\n        contents\r\n        createdAt\r\n        metaAccount\r\n      }\r\n      likes\r\n      tags\r\n      terminated\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  query($postId: String!) {\r\n    getPostState(postId: $postId) {\r\n      terminated\r\n    }\r\n  }\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  query($_id: String!) {\r\n    getPost(_id: $_id) {\r\n      _id\r\n      userId\r\n      title\r\n      contents\r\n      createdAt\r\n      reward\r\n      comments {\r\n        likes\r\n      }\r\n      likes\r\n      tags\r\n      terminated\r\n    }\r\n  }\r\n`;","import React, { Component, Fragment } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { ApolloConsumer } from \"react-apollo\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/ko\";\r\n\r\nimport deletePostMutation from \"../mutations/DeletePost\";\r\nimport terminatePostMutation from \"../mutations/TerminatePost\";\r\n\r\nimport getPostsWithPageQuery from \"../queries/GetPostsWithPage\";\r\nimport getPostStateQuery from \"../queries/GetPostState\";\r\nimport getPostQuery from '../queries/GetPost';\r\n\r\nclass PostOption extends Component {\r\n\r\n  refetchPostState = () => {\r\n    const {\r\n      match: {\r\n        params: { id: postId }\r\n      }\r\n    } = this.props;\r\n    // console.log('refetchqueries');\r\n    return [\r\n      {\r\n        query: getPostStateQuery,\r\n        variables: { postId }\r\n      }\r\n    ];\r\n  };\r\n\r\n  refetchPosts = () => {\r\n    const {\r\n      match: {\r\n        params: { page }\r\n      }\r\n    } = this.props;\r\n    return [\r\n      {\r\n        query: getPostsWithPageQuery,\r\n        variables: { page: parseInt(page) }\r\n      }\r\n    ];\r\n  };\r\n\r\n  onDeletePost = async (deletePost) => {\r\n    const { postId, match: {params: {page}} } = this.props;\r\n    await deletePost({variables: {postId}});\r\n    this.props.history.push(`/post/page/${page}`);\r\n  }\r\n  \r\n  terminatePostAndDealBreak = async (postId, terminatePost, client) => {\r\n    const terminatable = await this.isTerminatable(client, postId);\r\n    if (!terminatable) {\r\n      alert(\"현재 마감할 수 없는 질문입니다.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = terminatePost({ variables: { postId } });\r\n      this.onDealBreak(postId);\r\n      await res;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  isTerminatable = async (client, _id) => {\r\n    const {\r\n      data: {\r\n        getPost: { comments }\r\n      }\r\n    } = await client.query({\r\n      query: getPostQuery,\r\n      variables: { _id },\r\n      fetchPolicy: 'network-only',\r\n    });\r\n    console.log(comments);\r\n    const terminatable = comments.reduce((acc, v) => (v.likes < 5) && acc, true);\r\n    console.log(terminatable);\r\n    return terminatable;\r\n  };\r\n\r\n  onDealBreak = async postId => {\r\n    const { myContract } = this.props;\r\n    const options = {\r\n      gas: 100000\r\n    };\r\n\r\n    myContract.methods.dealBreak(postId).send(options);\r\n  };\r\n\r\n  // componentWillMount() {\r\n  //   this.props.setContentsState();\r\n  // }\r\n  \r\n  render() {\r\n    const {\r\n      postId,      \r\n      terminated,\r\n      onChangeEditStatus,\r\n      createdAt,\r\n      tags,\r\n      isMine,\r\n    } = this.props;\r\n    return (\r\n      <Fragment>\r\n      <div>\r\n        {terminated ? (\r\n          <div className=\"post-options-item post-terminated\">\r\n            Terminated\r\n            <br /> Question\r\n          </div>\r\n        ) : (\r\n          isMine &&\r\n          <Mutation mutation={terminatePostMutation} refetchQueries={this.refetchPostState}>\r\n            {terminatePost => (\r\n              <ApolloConsumer >\r\n                {client =>              \r\n                  <div\r\n                    className=\"post-options-item post-terminate\"\r\n                    onClick={() => this.terminatePostAndDealBreak(postId, terminatePost, client)}\r\n                  >\r\n                    Terminate\r\n                  </div>\r\n                }\r\n              </ApolloConsumer>\r\n            )}\r\n          </Mutation>\r\n        )}\r\n        <div className=\"post-options-item post-created\">\r\n          {moment(new Date(+createdAt)).fromNow()}\r\n        </div>\r\n        {isMine &&\r\n          <div className=\"post-edit post-options-item\">\r\n            <Icon name=\"edit\" onClick={onChangeEditStatus} className=\"icon\"/>\r\n          </div>\r\n        }\r\n        {isMine && \r\n          <div className=\"post-delete post-options-item\">\r\n            <Mutation mutation={deletePostMutation} refetchQueries={this.refetchPosts}>\r\n              {deletePost => \r\n                <Icon name=\"trash\" onClick={() => this.onDeletePost(deletePost)} />\r\n              }            \r\n            </Mutation>\r\n          </div>\r\n        }\r\n        </div>\r\n        <div className=\"post-options-item post-tags\">\r\n            {tags.map((v,i) => <div key={v+i}>{v}</div> )}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostOption;\r\n","import React from 'react'\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst SaveButton = ({ onSubmit, name, onChangeStatus }) => {\r\n  return (\r\n    <div className={name}>\r\n      <Icon name=\"save outline\" size=\"big\"  onClick={onSubmit} />\r\n      <Icon name=\"undo\" size=\"large\" onClick={onChangeStatus} />\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default SaveButton\r\n","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($postId: String!, $contents: String, $title: String, $tags: [String]) {\r\n  updatePost(postId: $postId, contents: $contents, title: $title, tags: $tags ) {\r\n    ok\r\n  }\r\n}\r\n`;","import React, { Component, Fragment } from \"react\";\r\nimport { Loader, TextArea, Icon } from \"semantic-ui-react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { Mutation, graphql } from \"react-apollo\";\r\n\r\nimport PostOption from './PostOption';\r\nimport SaveButton from './SaveButton';\r\n\r\nimport updatePostMutation from \"../mutations/UpdatePost\";\r\n\r\nimport getPostsWithPageQuery from \"../queries/GetPostsWithPage\";\r\n\r\nclass Post extends Component {\r\n  state = {\r\n    editStatus: false,\r\n    contents: \"\"\r\n  };\r\n\r\n  refetchPosts = () => {\r\n    const {\r\n      match: {\r\n        params: { page }\r\n      }\r\n    } = this.props;\r\n    return [\r\n      {\r\n        query: getPostsWithPageQuery,\r\n        variables: { page: parseInt(page) }\r\n      }\r\n    ];\r\n  };\r\n\r\n \r\n\r\n  onUpdatePost = async (updatePost) => {\r\n    const { contents } = this.state;\r\n    const { currPost: { _id: postId }, tags } = this.props;\r\n    \r\n    if (!contents) {\r\n      alert(\"수정할 내용을 입력하세요.\");\r\n      return;\r\n    }\r\n\r\n    await updatePost({ variables: { postId, contents, tags } });\r\n    // this.onChangeEditStatusFalse();\r\n  };\r\n\r\n  onChangeEditStatusTrue = () => {\r\n    this.setState({ editStatus: true });\r\n  };\r\n  onChangeEditStatusFalse = () => {\r\n    this.setState({ editStatus: false });\r\n  };\r\n\r\n  onChange = e => {\r\n    const contents = e.target.value;\r\n    this.setState({ contents });\r\n  };\r\n\r\n  setContentsState = () => {\r\n    const { currPost } = this.props;\r\n    this.setState({ contents: currPost.contents });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const idChange = prevProps.currPost._id !== this.props.currPost._id;\r\n    const postChange = prevProps.currPost !== this.props.currPost;\r\n\r\n    if (idChange || postChange) {\r\n      this.onChangeEditStatusFalse();\r\n      this.setContentsState();    \r\n    } \r\n  }\r\n  componentDidMount() {\r\n    this.setContentsState();\r\n  }\r\n\r\n  render() {\r\n    const { posts, currPost, loading, data, match, history, myContract, userId } = this.props;\r\n    const { editStatus, contents } = this.state;\r\n    // const currPost = this.getCurrentPost(posts)[0]; // currpost는 유지해야함 loading중 일 경우 undefined 뜸\r\n    // console.log(currPost);\r\n\r\n    return (\r\n      <Fragment>\r\n        {loading ? (\r\n          <Loader size=\"large\" active inverted>\r\n            Loading . . .\r\n          </Loader>\r\n        ) : posts.length ? (\r\n          editStatus ? (\r\n            <Mutation\r\n              mutation={updatePostMutation}\r\n              refetchQueries={this.refetchPosts}\r\n            >\r\n              {updatePost => (\r\n                <div className=\"main__screen--postlist--post\">\r\n                  <TextArea\r\n                    placeholder=\"내용을 입력하세요.\"\r\n                    className=\"main__screen--post--contents\"\r\n                    onChange={this.onChange}\r\n                    // onKeyPress={e => this.onUpdatePost(updatePost)}\r\n                    value={contents}\r\n                    // onBlur={this.onChangeEditStatus}\r\n                    autoFocus\r\n                  />\r\n                  <SaveButton name={\"post-edit-save-btn\"} onChangeStatus={this.onChangeEditStatusFalse} onSubmit={() => this.onUpdatePost(updatePost)} />\r\n                </div>\r\n              )}\r\n            </Mutation>\r\n          ) : (\r\n            <div className=\"main__screen--postlist--post\">\r\n              <div className=\"main__screen--post--contents\">\r\n                <div className=\"upper\">{currPost.title}</div>\r\n                <div className=\"lower\">\r\n                  <div className=\"post-options\">                  \r\n                    <PostOption \r\n                      terminated={data.getPostState.terminated} \r\n                      createdAt={currPost.createdAt} \r\n                      postId={currPost._id} \r\n                      onChangeEditStatus={this.onChangeEditStatusTrue}\r\n                      match={match}\r\n                      history={history}\r\n                      tags={currPost.tags}\r\n                      setContentsState={this.setContentsState}\r\n                      myContract={myContract}\r\n                      isMine={userId === currPost.userId}                      \r\n                    />\r\n                  </div>\r\n                  <ReactMarkdown\r\n                    className=\"post-contents\"\r\n                    source={currPost.contents}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        ) : (\r\n          <h1>Oops! No results!</h1>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Pagination extends Component {  \r\n\r\n  render() {\r\n    const { page, prevPage, nextPage } = this.props;\r\n    return (\r\n      <div className=\"pagination__wrapper\">\r\n        <ul className=\"pagination\">\r\n          {\r\n            prevPage && \r\n            <Link to={`/post/page/${page-1}`}>\r\n              <li ><span className=\"pagination--arrow\">&lt;</span>prev</li>\r\n            </Link>\r\n          }\r\n          {\r\n            nextPage &&\r\n            <Link to={`/post/page/${page+1}`}>\r\n              <li >next<span className=\"pagination--arrow\">&gt;</span></li>\r\n            </Link>\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pagination;","import gql from \"graphql-tag\";\r\n\r\nexport default gql`\r\n  query($postId: String!) {\r\n    getCommentsByPostId(postId: $postId) {\r\n      _id\r\n      userId\r\n      likes\r\n      contents\r\n      createdAt\r\n      selected\r\n      metaAccount\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($commentId: String!, $postId: String!) {\r\n  likeComment(commentId:$commentId, postId: $postId) {\r\n    ok\r\n  }\r\n}\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\nmutation($commentId: String!, $postId: String!) {\r\n  dislikeComment(commentId:$commentId, postId: $postId) {\r\n    ok\r\n  }\r\n}\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($commentId: String!, $postId: String!) {\r\n    selectComment(commentId:$commentId, postId: $postId) {\r\n      ok\r\n    }\r\n  }\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($postId: String!, $commentId: String!) {\r\n  deleteComment(postId: $postId, commentId: $commentId) {\r\n    ok\r\n  }\r\n}\r\n`;","import React, { Component, Fragment } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { Icon } from \"semantic-ui-react\";\r\n\r\nimport likeCommentMutation from \"../mutations/LikeComment\";\r\nimport dislikeCommentMutation from \"../mutations/DislikeComment\";\r\nimport selectCommentMutation from \"../mutations/SelectComment\";\r\nimport deleteCommentMutation from \"../mutations/DeleteComment\";\r\n\r\nimport getCommentsByPostIdQuery from \"../queries/GetCommentsByPostId\";\r\nimport getPostStateQuery from \"../queries/GetPostState\";\r\nimport { isAuthenticated } from \"../auth\";\r\n\r\nclass AnswerOption extends Component {\r\n\r\n  state = {\r\n    authenticated: false,\r\n    voted: false,\r\n  }\r\n\r\n  refetchComments = () => {\r\n    const { postId } = this.props;\r\n    // console.log('refetchqueries');\r\n    return [\r\n      {\r\n        query: getCommentsByPostIdQuery,\r\n        variables: { postId }\r\n      }\r\n    ];\r\n  };\r\n\r\n  refetchCommentsAndPostState = () => {\r\n    const { postId } = this.props;\r\n    // console.log('refetchqueries');\r\n    return [\r\n      {\r\n        query: getCommentsByPostIdQuery,\r\n        variables: { postId }\r\n      },\r\n      {\r\n        query: getPostStateQuery,\r\n        variables: { postId }\r\n      }\r\n    ];\r\n  };\r\n\r\n  onDealSuccess = () => {\r\n    const {\r\n      match: {\r\n        params: { id: postId }\r\n      },\r\n      comment: { metaAccount: userMetamaskAccount },\r\n      myContract\r\n    } = this.props;\r\n\r\n    const options = {\r\n      gas: 100000\r\n    };\r\n\r\n    myContract.methods\r\n      .setRecipientAndDealConclusion(postId, userMetamaskAccount)\r\n      .send(options);\r\n    console.log(\"deal succeed\");\r\n  };\r\n\r\n  onSelectComment = async selectComment => {\r\n    const {\r\n      comment: { _id: commentId },\r\n      postId,\r\n      terminated\r\n    } = this.props;\r\n\r\n    if (terminated) {\r\n      alert(\"이미 마감된 질문입니다.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = selectComment({ variables: { commentId, postId } });\r\n      this.onDealSuccess();\r\n      await res;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  onEstimateComment = async (handleComment, variables) => {\r\n    const { authenticated, voted } = this.state;\r\n    if (voted) {\r\n      alert(\"이미 투표하셨습니다\");\r\n      return;\r\n    }\r\n    if (!authenticated) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      return;\r\n    }\r\n    await handleComment(variables);\r\n    this.setState({ voted: true });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ authenticated: isAuthenticated() })\r\n  }\r\n  \r\n  render() {\r\n    const {\r\n      postId,      \r\n      comment: { _id: commentId, likes, selected,  },\r\n      onChangeEditStatusTrue,\r\n      isMine,\r\n    } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"answer-likes answer-option-item\">\r\n          <Mutation\r\n            mutation={likeCommentMutation}\r\n            refetchQueries={this.refetchComments}\r\n          >\r\n            {likeComment => (\r\n              <div\r\n                className=\"icon\"\r\n                onClick={() =>\r\n                  this.onEstimateComment(likeComment, { variables: { postId, commentId }})\r\n                }\r\n              >\r\n                +\r\n              </div>\r\n            )}\r\n          </Mutation>\r\n          <div>{likes}</div>\r\n          <Mutation\r\n            mutation={dislikeCommentMutation}\r\n            refetchQueries={this.refetchComments}\r\n          >\r\n            {dislikeComment => (\r\n              <div\r\n                className=\"icon\"\r\n                onClick={() =>\r\n                  this.onEstimateComment(dislikeComment, { variables: { postId, commentId }})\r\n                }\r\n              >\r\n                -\r\n              </div>\r\n            )}\r\n          </Mutation>\r\n        </div>\r\n        <div className=\"answer-choose-btn answer-option-item\">\r\n          <Mutation\r\n            mutation={selectCommentMutation}\r\n            refetchQueries={this.refetchCommentsAndPostState}\r\n          >\r\n            {selectComment =>\r\n              selected ? (\r\n                <Icon name=\"check\" size=\"big\" color=\"green\" />\r\n              ) : (\r\n                <Icon\r\n                  onClick={() => this.onSelectComment(selectComment)}\r\n                  name=\"check\"\r\n                  size=\"big\"\r\n                />\r\n              )\r\n            }\r\n          </Mutation>\r\n        </div>\r\n        {isMine && \r\n          <div className=\"answer-edit answer-option-item\">\r\n            <Icon name=\"edit\" onClick={onChangeEditStatusTrue} className=\"icon\"/>\r\n          </div>\r\n        }\r\n        {isMine && \r\n          <div className=\"answer-delete answer-option-item\">\r\n            <Mutation mutation={deleteCommentMutation} refetchQueries={this.refetchComments}>\r\n              {deleteComment => \r\n                <Icon name=\"trash\" onClick={() => deleteComment({ variables: { postId, commentId } })} />\r\n              }            \r\n            </Mutation>\r\n          </div>\r\n        }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnswerOption;\r\n","import gql from 'graphql-tag';\r\n\r\nexport default gql`\r\n  mutation($commentId: String!, $postId: String!, $contents: String!) {\r\n  updateComment(commentId: $commentId, postId: $postId, contents: $contents ) {\r\n    ok\r\n  }\r\n}\r\n`;","import React, { Component, Fragment } from \"react\";\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { Mutation } from \"react-apollo\";\r\nimport { TextArea } from \"semantic-ui-react\";\r\n\r\nimport AnswerOption from './AnswerOption';\r\nimport SaveButton from './SaveButton';\r\n\r\nimport updateCommentMutation from \"../mutations/UpdateComment\";\r\nimport getCommentsByPostIdQuery from '../queries/GetCommentsByPostId';\r\n\r\nclass Answer extends Component {\r\n\r\n  state = {\r\n    editStatus: false,\r\n    contents: '',\r\n  };\r\n\r\n  refetchComments = () => {\r\n    const { postId } = this.props;\r\n    // console.log('refetchqueries');\r\n    return [\r\n      {\r\n        query: getCommentsByPostIdQuery,\r\n        variables: { postId }\r\n      }\r\n    ];\r\n  };\r\n\r\n  onChangeEditStatusTrue = () => {\r\n    this.setState({ editStatus: true });\r\n  };\r\n  onChangeEditStatusFalse = () => {\r\n    this.setState({ editStatus: false });\r\n  };\r\n\r\n\r\n  onChange = e => {\r\n    const contents = e.target.value;\r\n    this.setState({ contents });\r\n  };\r\n\r\n  onUpdateComment = async (updateComment) => {\r\n    const { contents } = this.state;\r\n    const { postId, comment: { _id: commentId } } = this.props;\r\n   \r\n    if (!contents) {\r\n      alert('수정할 내용을 입력하세요.');\r\n      return;\r\n    }\r\n\r\n    await updateComment({ variables: { postId, commentId, contents }});\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log('setstate')\r\n    const {comment: {contents}} = this.props;\r\n    this.setState({ contents });\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.comment.contents !== this.props.comment.contents) {\r\n      this.onChangeEditStatusFalse();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { myContract, match, postId, comment, terminated, userId} = this.props;\r\n    const { editStatus, contents } = this.state;\r\n    return (\r\n      <Fragment>\r\n      {editStatus ? \r\n        <Mutation mutation={updateCommentMutation} refetchQueries={this.refetchComments}>\r\n          {updateComment => \r\n          <div className=\"answer-wrapper\">\r\n            <TextArea \r\n              placeholder=\"내용을 입력하세요\"\r\n              className=\"answer answer-add-write\"\r\n              onChange={this.onChange}\r\n              // onKeyPress={(e) => this.onUpdateComment(updateComment, e)}\r\n              value={contents}\r\n              // onBlur={this.onChangeEditStatus}\r\n              autoFocus\r\n            />\r\n            <SaveButton name={\"answer-edit-save-btn\"} onChangeStatus={this.onChangeEditStatusFalse} onSubmit={() => this.onUpdateComment(updateComment)} />\r\n          </div>\r\n        }          \r\n        </Mutation> : \r\n        <div className=\"answer-wrapper\">\r\n          <div className=\"answer\">\r\n            <div className=\"answer-option\">\r\n              <AnswerOption\r\n                myContract={myContract}\r\n                match={match}\r\n                postId={postId}\r\n                comment={comment}\r\n                terminated={terminated}\r\n                onChangeEditStatusTrue={this.onChangeEditStatusTrue}\r\n                isMine={userId === comment.userId}\r\n              />\r\n            </div>     \r\n              <ReactMarkdown\r\n              className=\"answer-contents\"\r\n              key={comment._id}\r\n              source={comment.contents}\r\n            />\r\n          </div>  \r\n        </div>   \r\n      }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Answer;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { TextArea } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { graphql, compose, Query } from \"react-apollo\";\r\n// import ReactMarkdown from \"react-markdown\";\r\nimport axios from \"axios\";\r\n// import SplitPane from 'react-split-pane';\r\n\r\nimport getCommentsByPostIdQuery from \"../queries/GetCommentsByPostId\";\r\n// import AnswerOption from './AnswerOption';\r\nimport Answer from \"./Answer\";\r\nimport SaveButton from './SaveButton';\r\nimport { getUserId, isAuthenticated } from \"../auth\";\r\n\r\n\r\nclass Answers extends Component {\r\n  state = {\r\n    writeStatus: false,\r\n    contents: \"\",\r\n    userId: \"\",\r\n  };\r\n\r\n  getCurrentPost = () => {\r\n    const {\r\n      match: {\r\n        params: { id }\r\n      },\r\n      posts\r\n    } = this.props;\r\n    if (!id) {\r\n      return posts.slice(posts.length - 1);\r\n    }\r\n    // console.log(id)\r\n    const currentPost = posts.filter(v => {\r\n      return v._id === id;\r\n    });\r\n    return currentPost;\r\n  };\r\n\r\n  onAddClick = (e) => {\r\n    if (!isAuthenticated()) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      return;\r\n    }\r\n    this.setState({ writeStatus: true });\r\n  };\r\n\r\n  onChange = e => {\r\n    const contents = e.target.value;\r\n    this.setState({ contents });\r\n  };\r\n  onChangeWriteStatusFalse = () => {\r\n    this.setState({ writeStatus: false });\r\n  }\r\n\r\n  onSubmit = async () => {\r\n    const { account: metaAccount } = this.props;\r\n    const { contents } = this.state;\r\n    const postId = this.getCurrentPost()[0]._id;\r\n    try {\r\n      const { data: userId } = await axios.get(\r\n        \"http://localhost:4000/getUserId\",\r\n        { withCredentials: true }\r\n      );\r\n      await this.props.mutate({\r\n        variables: { userId, postId, contents, metaAccount },\r\n        refetchQueries: [{ query: getCommentsByPostIdQuery, variables: { postId }}]\r\n      });\r\n      \r\n      this.setState({ contents: '' });\r\n      this.onChangeWriteStatusFalse();\r\n      // const { ok } = res.data.createComment;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    getUserId().then(userId => this.setState({ userId }));\r\n  }\r\n\r\n  render() {\r\n    const { writeStatus, contents, userId } = this.state;\r\n    const { posts, loading, myContract, match, data } = this.props;\r\n    const { _id,  } = this.getCurrentPost()[0] || [];\r\n    // console.log(loading, posts)\r\n    return (\r\n      <Fragment>\r\n        {loading ? null : (\r\n          <Query query={getCommentsByPostIdQuery} variables={{ postId: _id }}>\r\n            {({ loading, error, data: { getCommentsByPostId: comments }}) => {\r\n              console.log(comments);\r\n              return (\r\n                loading ? \r\n                null :\r\n                <div className=\"answer-list\">\r\n                  {!writeStatus ? (\r\n                    <div className=\"answer-wrapper\">\r\n                      <div\r\n                        className=\"answer answer-add\"\r\n                        onClick={this.onAddClick}\r\n                      >\r\n                        +\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"answer-wrapper\">\r\n                      <TextArea\r\n                        placeholder=\"내용을 입력하세요.\"\r\n                        className=\"answer answer-add-write\"\r\n                        onChange={this.onChange}                        \r\n                        value={contents}                        \r\n                        autoFocus\r\n                      />\r\n                      <SaveButton name={\"answer-save-btn\"} onChangeStatus={this.onChangeWriteStatusFalse} onSubmit={this.onSubmit} />\r\n                    </div>\r\n                  )}\r\n                  {posts.length &&\r\n                    (comments.length\r\n                      ? comments.map((v,i) => (         \r\n                        <Answer \r\n                          key={v._id} \r\n                          myContract={myContract} \r\n                          match={match} \r\n                          postId={_id} \r\n                          comment={v} \r\n                          terminated={data.getPostState.terminated}\r\n                          userId={userId}\r\n                        /> \r\n                        ))\r\n                      : null)}\r\n                </div>\r\n              );\r\n            }}\r\n          </Query>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst createCommentMutation = gql`\r\n  mutation($userId: String!, $postId: String!, $contents: String!, $metaAccount: String!) {\r\n    createComment(userId: $userId, postId: $postId, contents: $contents, metaAccount: $metaAccount) {\r\n      ok\r\n    }\r\n  }\r\n`;\r\n\r\nexport default compose(graphql(createCommentMutation))(Answers);\r\n","export default  \r\n[\r\n\t{\r\n\t\t\"constant\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"_key\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"dealBreak\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": true,\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"constant\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"_key\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setQuestion\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": true,\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"constant\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"_key\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"_recipient\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setRecipientAndDealConclusion\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": true,\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"_key\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getQuestion\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n]","import gql from \"graphql-tag\";\r\n\r\nexport default gql`\r\n  query($page:Int!, $keyword:String!){\r\n    getPostWithKeyword(page: $page, keyword: $keyword) {\r\n      _id\r\n      userId\r\n      title\r\n      contents\r\n      createdAt\r\n      reward\r\n      comments {\r\n        likes\r\n        contents\r\n        createdAt\r\n        metaAccount\r\n      }\r\n      likes\r\n      tags\r\n      terminated\r\n    }\r\n  }\r\n`;","import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport { Redirect, Link  } from \"react-router-dom\";\r\nimport { Modal, Icon, Input } from 'semantic-ui-react';\r\nimport Web3 from 'web3';\r\n\r\nimport SideNav from \"./../components/SideNav\";\r\nimport TopNav from \"../components/TopNav\";\r\nimport List from \"./../components/List\";\r\nimport Post from \"./../components/Post\";\r\nimport Pagination from \"./../components/Pagination\";\r\nimport Answers from \"./../components/Answers\";\r\nimport ABI from \"../ABI\";\r\n\r\nimport getPostWithKeywordQuery from '../queries/GetPostWithKeyword';\r\nimport getPostsWithPageQuery from '../queries/GetPostsWithPage';\r\nimport getPostStateQuery from '../queries/GetPostState';\r\nimport { getUserId } from '../auth';\r\n\r\nclass PostList extends Component {\r\n  state = {\r\n    title: \"\",\r\n    contents: \"\",\r\n    createdAt: \"\",\r\n    account: '',\r\n    myContract: {},\r\n    searchKeyword: '',\r\n    userId: '',\r\n  };\r\n\r\n  onTransactionDefaultSetting = async () => {\r\n    if (typeof window.web3 !== 'undefined') { \r\n      window.web3 = new Web3(window.web3.currentProvider);         \r\n    }\r\n\r\n    try {\r\n      const account = await window.web3.eth.getAccounts(); \r\n      const myContract = await window.web3.eth.Contract(ABI,\"0x8768befc1c821b62c756e9e1a78c905ddc11395a\" ,{\r\n        defaultAccount: account[0],\r\n        defaultGasPrice: '20000000000',\r\n      });  \r\n     \r\n      this.setState({ myContract, account: account[0], });\r\n    } \r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  getCurrentPost = posts => {\r\n    const {\r\n      match: {\r\n        params: { id }\r\n      }\r\n    } = this.props;\r\n    if (!id) {\r\n      return posts.slice(posts.length - 1);\r\n    }\r\n    // console.log(id)\r\n    const currentPost = posts.filter(v => {\r\n      return v._id === id;\r\n    });\r\n    return currentPost;\r\n  };\r\n\r\n  // onPageClick = async client => {\r\n  //   try {\r\n  //     const page = parseInt(this.props.match.params.page || 1);\r\n\r\n  //     const data = await client.query({\r\n  //       query: getPostsWithPageQuery,\r\n  //       variables: { page }\r\n  //     });\r\n  //     console.log(data);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n\r\n  onValueChange = (e) => {\r\n    const searchKeyword = e.target.value;\r\n    this.setState({ searchKeyword });\r\n  }\r\n\r\n  onKeywordSearch = (e) => {\r\n    const { searchKeyword } = this.state;\r\n    if (e.key !== \"Enter\") {\r\n      return ;\r\n    }\r\n    if (!searchKeyword) {\r\n      alert(\"검색어를 입력하세요\");\r\n      return;\r\n    }\r\n    this.props.history.push(`/post/${searchKeyword}/page/1`);\r\n  }\r\n\r\n  onMakePostQuery = () => {\r\n    const { match: { params: { keyword }}} = this.props;\r\n\r\n    if (!keyword) {\r\n      return getPostsWithPageQuery;\r\n    } else {\r\n      return getPostWithKeywordQuery;\r\n    }\r\n  }\r\n\r\n  onMakePostQueryVariables = () => {\r\n    const { match: { params: { keyword, page }}} = this.props;\r\n\r\n    if (!keyword) {\r\n      return {\r\n        page: this.handleParsePageNum(page)\r\n      }\r\n    } else {\r\n      return {\r\n        page: this.handleParsePageNum(page),\r\n        keyword\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  handleParsePageNum = page => {\r\n    page = parseInt(page);\r\n    if (page === undefined) {\r\n      return 1;\r\n    }\r\n\r\n    if (page < 1) {\r\n      return 1;\r\n    } else {\r\n      return page;\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.onTransactionDefaultSetting();\r\n    getUserId().then(userId => this.setState({ userId }));\r\n  }\r\n\r\n  render() {\r\n    const { myContract,account, searchKeyword, userId } = this.state;\r\n    let { match: { params: { page, id, keyword } }, match, history} = this.props;\r\n    let posts;\r\n    page = parseInt(page);\r\n    return page > 0 ? (\r\n      <Query\r\n        query={this.onMakePostQuery()}\r\n        variables={this.onMakePostQueryVariables()}\r\n      >\r\n        { ({ loading: loadingOne, error, data: { getPostsWithPage = [], getPostWithKeyword = [] } }) => {\r\n          posts = getPostsWithPage.length ? getPostsWithPage : getPostWithKeyword;\r\n          console.log(posts)\r\n          if (!id && posts && !loadingOne) {\r\n            if (!keyword) {\r\n              return ( <Redirect  to={`/post/page/${page}/${posts[0]._id}`}/>)\r\n            } else {\r\n              return ( <Redirect  to={`/post/${keyword}/page/${page}/${posts[0]._id}`}/>)\r\n            }\r\n            \r\n          }\r\n          posts = posts.slice().reverse();\r\n          const currPost = this.getCurrentPost(posts)[0]; \r\n          // console.log(currPost);\r\n          return (\r\n            <Query \r\n              query={getPostStateQuery}\r\n              variables={{ postId: id || '' }}\r\n            >\r\n            {({ loading: loadingTwo, error, data }) => {\r\n              \r\n              return (                \r\n                // <ApolloConsumer>\r\n                //   {client => {\r\n                //     return (\r\n                    <div>\r\n                      <div className=\"postlist\">\r\n                        <SplitPane split=\"vertical\" minSize=\"50%\" defaultSize=\"50%\">\r\n                          <SideNav>\r\n                            <List\r\n                              loading={loadingOne}\r\n                              posts={posts}\r\n                              keyword={keyword}\r\n                              page={page}\r\n                              postId={match.params.id}\r\n                            />\r\n                            <Pagination\r\n                              page={page}\r\n                              prevPage={page > 1}\r\n                              nextPage={posts.length >= 10}\r\n                            />\r\n                          </SideNav>\r\n                          <main className=\"main__screen--postlist\">\r\n                            <TopNav {...this.props} />\r\n                            {\r\n                              currPost &&\r\n                              <Post\r\n                              loading={loadingOne || loadingTwo}\r\n                              posts={posts}\r\n                              currPost={currPost}\r\n                              match={match}\r\n                              data={data} //terminated\r\n                              myContract={myContract}\r\n                              history={history}\r\n                              userId={userId}\r\n                            />\r\n                            }\r\n                            <Modal trigger={<div className=\"postlist--open-search-bar\"><Icon size=\"small\" name=\"search\" /></div>} basic size='small'>\r\n                              <Modal.Content>\r\n                                <Input value={searchKeyword} onChange={this.onValueChange} onKeyPress={this.onKeywordSearch} placeholder=\"검색어를 입력하세요.\" size=\"huge\" fluid autofocus />\r\n                              </Modal.Content>\r\n                            </Modal>\r\n                            <Link to=\"/post/create\"><div className=\"postlist--to-create-post\">+</div></Link>\r\n                          </main>\r\n                        </SplitPane>\r\n                      }\r\n                      </div>\r\n                      <div className=\"post-answer\">\r\n                        <Answers \r\n                          loading={loadingOne || loadingTwo} \r\n                          data={data} \r\n                          currPost={currPost} \r\n                          posts={posts} \r\n                          match={match} \r\n                          myContract={myContract} \r\n                          account={account} \r\n                          userId={userId} \r\n                        />\r\n                      </div>\r\n                    </div>\r\n                //   )}}\r\n                // </ApolloConsumer>\r\n               )\r\n              }}\r\n            </Query>\r\n          );\r\n        }}\r\n      </Query>\r\n    ) : (\r\n      <Redirect to=\"/post/page/1\" />\r\n    );\r\n  }\r\n}\r\n\r\nconst allPostsQuery = gql`\r\n  {\r\n    allPosts {\r\n      _id\r\n      userId\r\n      title\r\n      contents\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostList;\r\n","import React from \"react\";\r\nimport {Icon } from 'semantic-ui-react';\r\n\r\n\r\nconst StepChanger = ({ prevStep, nextStep, changeStep }) => (\r\n  <div className=\"step-changer__wrapper\">\r\n    <ul className=\"step-changer\">\r\n      {prevStep && (\r\n        <li onClick={() => changeStep('prev')}>\r\n          <Icon name=\"chevron left\" />이전\r\n        </li>\r\n      )}\r\n      {nextStep && (\r\n        <li onClick={() => changeStep('next')}>\r\n          다음<Icon name=\"chevron right\"  />\r\n        </li>\r\n      )}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default StepChanger;","import React, { Component } from \"react\";\r\nimport { Icon, Step, Input } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\n\r\nclass Steps extends Component {\r\n\r\n  state = {\r\n    currentPrice: '',\r\n    value: '',    \r\n  }\r\n\r\n  componentDidMount () {\r\n    setInterval(() => {\r\n      axios.get('https://api.bithumb.com/public/ticker/ETH')\r\n        .then(res => {\r\n          const { data: {data: { closing_price: currentPrice }} } = res;\r\n          this.setState({currentPrice});\r\n        });\r\n        \r\n    }, 2000)\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { value } = e.target;   \r\n    this.setState({ value });\r\n  }\r\n\r\n  render() {\r\n    const { currentStep } = this.props;\r\n    const { currentPrice, value } = this.state;\r\n    return (\r\n      <Step.Group vertical size='mini'>\r\n        <Step className={currentStep === 1 ? \"active\" : \"completed\"} >\r\n          <Icon name=\"pencil alternate\" />\r\n          <Step.Content>\r\n            <Step.Title>제 목</Step.Title>\r\n            <Step.Description>질문 제목 입력</Step.Description>\r\n          </Step.Content>\r\n        </Step>\r\n\r\n        <Step className={currentStep === 2 ? \"active\" : (currentStep > 2 ? \"completed\" : \"\")  }>\r\n          <Icon name=\"content\" />\r\n          <Step.Content>\r\n            <Step.Title>내 용</Step.Title>\r\n            <Step.Description>내용 입력, 마크다운 사용가능</Step.Description>\r\n          </Step.Content>\r\n        </Step>\r\n\r\n        <Step className={currentStep === 3 ? \"active\" :  (currentStep > 3 ? \"completed\" : \"\")} >\r\n          <Icon name=\"tags\" />\r\n          <Step.Content>\r\n            <Step.Title>태 그</Step.Title>\r\n            <Step.Description>관련 태그 입력</Step.Description>\r\n          </Step.Content>\r\n        </Step>\r\n\r\n        <Step className={currentStep === 4 ? \"active\" : \"\"} >\r\n          <Icon name=\"money\" />\r\n          <Step.Content>\r\n            <Step.Title>제시할 보상금</Step.Title>\r\n            <Step.Description>1이더리움 = 현재 한화 <strong>{currentPrice || `약 30만`}원</strong></Step.Description>\r\n          </Step.Content>\r\n        </Step>\r\n\r\n        <Step>        \r\n          <Icon name=\"calculator\" />        \r\n          <Step.Content>\r\n            <Step.Description>\r\n              <div className=\"ether-calculator\">\r\n                <Input placeholder=\"이더리움 계산기(이더)\" size=\"mini\" value={value} onChange={this.onChange} />\r\n                <Icon name=\"angle double down\" size=\"small\" />\r\n                <Input placeholder=\"이더리움 계산기(원화)\" size=\"mini\" value={value && +value * +currentPrice} onChange={this.onChange} />\r\n              </div>\r\n            </Step.Description>\r\n          </Step.Content>\r\n        </Step>\r\n      </Step.Group>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Steps;\r\n","import React, { Component, } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { graphql } from \"react-apollo\";\r\nimport {\r\n  Icon\r\n} from \"semantic-ui-react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport axios from \"axios\";\r\nimport Web3 from 'web3';\r\nimport Fade from 'react-reveal/Fade';\r\n\r\nimport SideNav from \"../components/SideNav\";\r\nimport GetPostsWithPageQuery from \"../queries/GetPostsWithPage\";\r\nimport TopNav from \"./../components/TopNav\";\r\nimport { isAuthenticated } from \"../auth\";\r\nimport ABI from '../ABI';\r\nimport StepChanger from \"../components/StepChanger\";\r\nimport Steps from '../components/Steps';\r\n\r\nclass CreatePost extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      contents: \"\",\r\n      tags: ['React'],\r\n      tagValue: '',\r\n      reward: '',\r\n      account: '',\r\n      myContract: {},\r\n      etherBalance: 0,\r\n      steps: [1,2,3,4],\r\n      currentStep: 1,\r\n    }\r\n  }\r\n\r\n  onTransactionDefaultSetting = async () => {\r\n    if (typeof window.web3 !== 'undefined') { \r\n      // console.log(window.web3);\r\n      window.web3 = new Web3(window.web3.currentProvider);       \r\n    } else {\r\n      console.log('web3 is not defined now');\r\n      return ;\r\n    }\r\n\r\n    try {\r\n      const account = await window.web3.eth.getAccounts();\r\n      console.log(account)\r\n      this.setState({ account: account[0] });\r\n      const contract = window.web3.eth.Contract(ABI,\"0x8768befc1c821b62c756e9e1a78c905ddc11395a\" ,{\r\n        defaultGasPrice: '20000000000',\r\n        defaultAccount: this.state.account,\r\n        \r\n      });  \r\n      const balance = window.web3.eth.getBalance(this.state.account);\r\n\r\n      const myContract = await contract;\r\n      const weiBalance = await balance;\r\n\r\n      const etherBalance = await window.web3.utils.fromWei(weiBalance);\r\n      this.setState({ myContract, etherBalance });\r\n    } \r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n    // this.onSetQuestion();\r\n  }\r\n\r\n  onSetQuestion = async (postId) => {\r\n    const { reward, myContract, etherBalance } = this.state;  \r\n    \r\n    if (parseInt(etherBalance) < parseInt(reward)) {\r\n      console.log('not enough balance!!!! Go get more ether!');\r\n      return;\r\n    }   \r\n    try {\r\n      const rewardWei = await window.web3.utils.toWei(reward, 'ether');\r\n      const options = {\r\n        value: rewardWei,\r\n        gas: 3000000,\r\n      }\r\n  \r\n      myContract.methods.setQuestion(postId).send(options); \r\n    } catch (err) {\r\n      console.error(err);\r\n    }    \r\n  }\r\n\r\n\r\n\r\n  onSubmit = async e => {\r\n    e.preventDefault();\r\n    const { title, contents, tags, reward, account } = this.state;\r\n    if (!title && !contents && !reward) {\r\n      alert(\"작성되지 않은 폼이 있습니다. 확인 해주세요\");\r\n      return\r\n    }\r\n    if (!account) {\r\n      alert(\"메타마스크 로그인을 확인 해주세요\");\r\n      return;\r\n    }\r\n    try {\r\n      const { data: userId } = await axios.get(\r\n        \"http://localhost:4000/getUserId\",\r\n        { withCredentials: true }\r\n      );\r\n      const res = await this.props.mutate({\r\n        variables: { userId, title, contents, tags, reward: parseFloat(reward) }, // here!!!!!\r\n        refetchQueries: [\r\n          { query: GetPostsWithPageQuery, variables: { page: 1 } }\r\n        ]\r\n      });\r\n      // console.log(res);\r\n      const { ok, post: { _id } } = res.data.createPost;\r\n      this.onSetQuestion(_id);      \r\n      \r\n      if (ok) {\r\n        this.props.history.push('/');\r\n      } else {\r\n        console.log('invalid creating post');\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  onAddTag = e => {\r\n    if (e.key  === 'Enter') {\r\n      const value = e.target.value;\r\n      if (this.state.tags.includes(value)) {\r\n        return;\r\n      }\r\n      this.setState({ tags: [...this.state.tags, value ] });\r\n      this.setState({ tagValue: '' });\r\n    }\r\n  }\r\n  \r\n  onDeleteTag = (e) => {\r\n    e.stopPropagation();\r\n    const value = e.target.previousSibling.textContent;\r\n    const tags = this.state.tags.filter(v => v !== value);\r\n    this.setState({ tags })\r\n  }\r\n\r\n  onChangeStep = (value) => {\r\n    if (value === 'prev') {\r\n      this.setState({ currentStep: this.state.currentStep - 1 });\r\n    } else {\r\n      this.setState({ currentStep: this.state.currentStep + 1 });\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (!isAuthenticated()) {\r\n      alert(\"로그인이 필요한 서비스입니다\")\r\n      this.props.history.push('/');\r\n      return;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onTransactionDefaultSetting();\r\n  }\r\n  \r\n  render() {\r\n   \r\n    const { contents, title, tags, tagValue, reward, currentStep } = this.state;\r\n    return  (\r\n      <div className=\"create-post\">\r\n        <SplitPane split=\"vertical\" minSize=\"20%\" defaultSize=\"20%\">\r\n          <SideNav>\r\n            <div className=\"create-post__guide\">\r\n              <Steps currentStep={currentStep} />\r\n            </div>            \r\n          </SideNav>\r\n          <main>\r\n            <TopNav {...this.props} />\r\n            <div className=\"create-post__data\">\r\n              <div><h2>질문작성</h2></div>\r\n              <div className=\"create-post__form-container\">\r\n              <StepChanger prevStep={currentStep > 1} nextStep={currentStep < 4} changeStep={this.onChangeStep} />\r\n                {\r\n                  (currentStep === 1) &&\r\n                  <Fade right >\r\n                    <input\r\n                    onChange={this.onChange}\r\n                    value={title}\r\n                    placeholder=\"제목\"\r\n                    name=\"title\"\r\n                    className=\"create-post__input\"\r\n                  />\r\n                </Fade>\r\n                }\r\n                {\r\n                  (currentStep === 2) &&\r\n                  <div className=\"create-post__contents\">\r\n                    <Fade right >\r\n                      <textarea\r\n                      onChange={this.onChange}\r\n                      value={contents}\r\n                      placeholder=\"내용\"\r\n                      name=\"contents\"\r\n                      style={{ minHeight: 300 }}\r\n                      className=\"create-post__textarea\"\r\n                    />\r\n                      <Icon name=\"angle double right\" inverted color=\"black\" size=\"big\" />\r\n                      <div className=\"create-post__markdown-viewer\"><ReactMarkdown source={contents} /></div>\r\n                    </Fade>\r\n                  </div> \r\n                }\r\n                {\r\n                  (currentStep === 3 ) && \r\n                  <Fade right>\r\n                    <div className=\"create-post__tag-creator\">\r\n                      <div className=\"tag-shower\">\r\n                        {tags.map((v,i) => <div className=\"tag\" key={v+i} >{v}<Icon name=\"close\" className=\"tag-close\" onClick={this.onDeleteTag}/></div>)}\r\n                        <input placeholder=\"태그 추가하기\" name=\"tagValue\" value={tagValue} onKeyPress={this.onAddTag} onChange={this.onChange}/>                  \r\n                      </div>\r\n                      \r\n                    </div>\r\n                  </Fade>\r\n                }\r\n                {\r\n                  (currentStep === 4) && \r\n                  <Fade right>\r\n                    <input\r\n                      onChange={this.onChange}\r\n                      value={reward}\r\n                      placeholder=\"리워드를 입력하세요. 단위는 이더 입니다. ex) 0.01\"\r\n                      name=\"reward\"\r\n                      className=\"create-post__input\"\r\n                    />\r\n                    <button className=\"create-post__submit\" onClick={this.onSubmit}>작성</button>\r\n                  </Fade>\r\n                } \r\n                \r\n              </div>              \r\n            </div>\r\n          </main>\r\n        </SplitPane>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst createPostMutation = gql`\r\n  mutation(\r\n    $userId: String!\r\n    $title: String!\r\n    $contents: String!\r\n    $tags: [String!]\r\n    $reward: Float!\r\n  ) {\r\n    createPost(\r\n      userId: $userId\r\n      title: $title\r\n      contents: $contents\r\n      tags: $tags\r\n      reward: $reward\r\n    ) {\r\n      ok\r\n      post {\r\n        _id\r\n        title\r\n        contents\r\n        userId\r\n        reward\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default graphql(createPostMutation)(CreatePost);\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <Redirect to=\"/\" />\r\n  )\r\n}\r\n\r\nexport default NoMatch;\r\n","import React from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n      <div className=\"footer-nav\">\r\n        <ul>\r\n          <li>About us</li>\r\n          <li>Blog</li>\r\n          <li>Github</li>\r\n        </ul>\r\n        <ul>\r\n          <li><Icon name=\"github\" size=\"large\" className=\"github\" /></li>\r\n          <li><Icon name=\"ethereum\" size=\"large\" className=\"ethereum\"/></li>\r\n        </ul>\r\n      </div>\r\n      <p>Copyright &copy; 2019 All rights reserved, <span>DSU</span></p>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\nimport './css/index.css';\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n})\n\nconst App = (\n  <ApolloProvider client={client}>    \n    <Routes />\n  </ApolloProvider>\n);\n\n\nReactDOM.render(App , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch, } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport Login from './Login';\r\nimport PostList from './PostList';\r\nimport CreatePost from './CreatePost';\r\nimport NoMatch from './NoMatch';\r\nimport Footer from '../components/Footer';\r\n\r\nexport default () => (\r\n  <BrowserRouter>\r\n    <Switch>      \r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/login\" component={Login} />\r\n      <Route path=\"/rank\" component={Login} />\r\n      <Route path=\"/chat\" component={Home} />\r\n      <Route path=\"/post/create\" component={CreatePost} />\r\n      <Route exact path=\"/post/:keyword/page/:page/:id\" component={PostList} />\r\n      <Route exact path=\"/post/:keyword/page/:page\" component={PostList} />\r\n      <Route exact path=\"/post/page/:page/:id\" component={PostList} />\r\n      <Route exact path=\"/post/page/:page\" component={PostList} />      \r\n      <Route component={NoMatch} />\r\n    </Switch>\r\n    <Footer />\r\n  </BrowserRouter>\r\n)"],"sourceRoot":""}